/* mipslabmain.c

   This file written 2015 by Axel Isaksson,
   modified 2015, 2017 by F Lundevall

   Latest update 2017-04-21 by F Lundevall
   Latest update 2020-03-05 by L Filippeschi 

   For copyright and licensing, see file COPYING */

#include <stdint.h>   /* Declarations of uint_32 and the like */
#include <pic32mx.h>  /* Declarations of system-specific addresses etc */
#include "mipslab.h"  /* Declatations for these labs */
#include <stdbool.h>

#define ACC_SENSOR_ADDR 0xd0
#define ACC_SENSOR_REG  0x3b
#define EEP_SENSOR_ADDR  0xa0

int eepromdata=0;
uint8_t leader=0;

int main(void) {
        /*
	  This will set the peripheral bus clock to the same frequency
	  as the sysclock. That means 80 MHz, when the microcontroller
	  is running at 80 MHz. Changed 2017, as recommended by Axel.
	  	*/
  	SYSKEY = 0xAA996655;  /* Unlock OSCCON, step 1 */
  	SYSKEY = 0x556699AA;  /* Unlock OSCCON, step 2 */
	//while(OSCCON & (1 << 21)); /* Wait until PBDIV ready */
	//	OSCCONCLR = 0x180000; /* clear PBDIV bit <0,1> */
	//OSCCONSET = 0x080000;
	//while(OSCCON & (1 << 21));  /* Wait until PBDIV ready */
	// 	SYSKEY = 0x0;  /* Lock OSCCON */



	/* Set up peripheral bus clock */
	OSCCON &= ~0x180000;
	OSCCON |= 0x080000;	
	
	/* Set up output pins */
	AD1PCFG = 0xFFFF;
	ODCE = 0x0;
	TRISECLR = 0xFF;
	PORTE = 0x0;
	
	/* Output pins for display signals */
	PORTF = 0xFFFF;
	PORTG = (1 << 9);
	ODCF = 0x0;
	ODCG = 0x0;
	TRISFCLR = 0x70;
	TRISGCLR = 0x200;
	
	/* Set up input pins */
	TRISDSET = (1 << 8);
	TRISFSET = (1 << 1);
	
	/* Set up SPI as master */
	SPI2CON = 0;
	SPI2BRG = 4;
	/* SPI2STAT bit SPIROV = 0; */
	SPI2STATCLR = 0x40;
	/* SPI2CON bit CKP = 1; */
        SPI2CONSET = 0x40;
	/* SPI2CON bit MSTEN = 1; */
	SPI2CONSET = 0x20;
	/* SPI2CON bit ON = 1; */
	SPI2CONSET = 0x8000;


	/* Set up i2c */
	I2C1CON = 0x0;
	/* I2C Baud rate should be less than 400 kHz, is generated by dividing
	the 40 MHz peripheral bus clock down */
	I2C1BRG = 0xc2;
	I2C1STAT = 0x0;
	I2C1CONSET = 1 << 13; //SIDL = 1
	I2C1CONSET = 1 << 15; // ON = 1
	//	I2C1RCV=0; //Clear receive buffer



	acc_init();
	display_init();
	//	display_fimage(intro); //intro screen 
	//	quicksleep(10000000);	
	display_fimage(intro1);
	
	//quicksleep(10000000);
	//display_fimage(textintro);
	quicksleep(10000000);
	display_fimage(ninja);
	quicksleep(10000000);
	display_clear();
	
	//	display_fimage(intro); //intro screen 
	//	quicksleep(10000000);	

	i2c_start(); //random
	i2c_send(EEP_SENSOR_ADDR);
	i2c_send(0x00);//Hbyte of eepromdata
	i2c_send(0x80);//LByte
	i2c_start();
	i2c_send(EEP_SENSOR_ADDR+1);
	leader = i2c_recv(); //data
	i2c_stop();
	
	/*
	//	clear_eeprom(); //debug not working
	PORTE +=1;
		
	i2c_start(); //random
	i2c_send(EEP_SENSOR_ADDR);
	i2c_send(0x00);//Hbyte of eepromdata
	i2c_send(0x80);//LByte
	i2c_start();
	i2c_send(EEP_SENSOR_ADDR+1);
	eepromdata = i2c_recv()<<8; //data
	i2c_ack();
	 //next register
	eepromdata |= i2c_recv(); //data
	PORTE +=1;
	//	if(eepromdata==10)
	//	clear_eeprom();
	PORTE +=1;	
	uint8_t leaderboard[3];
	int i;
	uint8_t tmp;
	for(i=0; i<eepromdata; i++){
	  tmp = i2c_recv(); //data
	  PORTE +=1;
	  if(tmp>leaderboard[0]){
	    leaderboard[2]=leaderboard[1];
	    leaderboard[1]=leaderboard[0];
	    leaderboard[0]=tmp;
	  } else if(tmp>leaderboard[1]){
	    leaderboard[2]=leaderboard[1];
	    leaderboard[1]=tmp;
	  } else if(tmp>leaderboard[2]){
	    leaderboard[2]=tmp;
	  }
	}
	i2c_stop();
	

	//clear the leaderboard
	//	if(eepromdata==0 || eepromdata==10)
	// clear_eeprom();

	
	display_string(0, "LEADERBOARD:");  //leaderboard
	display_string(1, itoaconv(leaderboard[0]));
	display_string(2, itoaconv(leaderboard[1]));
	display_string(3, itoaconv(leaderboard[2]));
	display_update();
*/
	PORTE+=1;
	display_string(0, "LEADERBOARD");  //leaderboard
	PORTE+=1;
	display_string(1, itoaconv(leader));
	display_string(2, "");
	display_string(3, "");
	display_update();
	PORTE+=1;
	quicksleep(10000000);
	
	
	labinit(); /* Do any lab-specific initialization */

	while( 1 )
	{
	  labwork(); /* Do lab-specific things again and again */
	}
	return 0;
}
